desc:Stereo PingPong Delay - (cookdsp)

slider1:0<0,1,1{Synced to beat, Not synced to beat}>Delay mode
slider2:2<0,7,1{1, 2, 3, 4, 5, 6, 8, 16}>Delay time in 16th notes (when synced)
slider3:1<1,1000,0.1>Delay time in ms (when not synced)
slider4:500<20,18000,1>Bandpass freq in Hz
slider5:4<0.5,9.0,0.1>Bandpass Width (Octaves)
slider6:60<0,95,1>Feedback (%)
slider7:50<0,100,1>Wet (%)
//slider8:0<0,1,1{Yes,No}>Freeze

import cookdsp.jsfx-inc
import cookdsp-mods.jsfx-inc



/********************************************************
*
* Init
*
********************************************************/
@init

function calculateFilterParameters()
(    
    bw = slider5;
    q = pow(2, bw * 0.5) / (pow(2., bw) - 1);
    centerFreq = slider4;
    displayFreq = centerFreq;
    
    // Restrict range of cutoff frequencies to avoid frequency response aliasing
    filterMin = centerFreq * ( sqrt(1 + (1/(4*q*q))) - 1 / (2*q));
    filterMax = centerFreq * ( sqrt(1 + (1/(4*q*q))) + 1 / (2*q));        
    filterMin  = clip(filterMin, 20., 18000);
    filterMax  = clip(filterMax, 20., 18000);
    centerFreq = sqrt(filterMin * filterMax);
    q = centerFreq / (filterMax - filterMin);
);

function updateFilterParameters()
(
    calculateFilterParameters();
    
    filt0.butbp_set_freq(centerFreq);
    filt1.butbp_set_freq(centerFreq);
    filt0.butbp_set_q_unclipped(q);
    filt1.butbp_set_q_unclipped(q);
);


// Constants
kLog20 = log10(20);
kLog20k = log10(20000);

// 2 sec delay is sufficient for all 16th note delay times down to bpm = 30
d0.delay(2*srate);
d1.delay(2*srate);

calculateFilterParameters();
filt0.butbp(centerFreq, q);
filt1.butbp(centerFreq, q);

// Only redraw when needed
gfx_clear=-1;

// These settings force redraw at init
prevDisplayFreq = -99;
prevQ           = -9;
prevWidth       = -99;
prevHeight      = -99;


/********************************************************
*
* Slider
*
********************************************************/
@slider
// delay time params
noteDelay = 1 + slider2;
(slider2 == 6) ? (noteDelay = 8);
(slider2 == 7) ? (noteDelay = 16);

// filter params
updateFilterParameters();

// signal flow params
feedback = slider6 * 0.01;
mixWet = slider7 * 0.01;
mixDry = 1.0 - mixWet;



/********************************************************
*
* Graphics
*
********************************************************/
@gfx 570 230

function drawFreqLines(freq, label)
(
  x = scale(log10(freq), kLog20, kLog20k, 60., 510, 1);
  gfx_line(x, 30, x, 210, 1);
  gfx_measurestr(label, w, h);
  gfx_x = x - 0.5*w;
  gfx_y = 16;
  gfx_drawstr(label);
);

function drawDbLabel(label)
(
  gfx_measurestr(label, w, h);
  gfx_x = 524 -0.5*w;
  gfx_drawstr(label);
  gfx_y += 30;
);

// Mouse interaction
(mouse_cap == 1) ?
(
    mousePosX = mouse_x;
    mousePosY = mouse_y;
    
    mousePosX = clip(mousePosX, 60., 510.);
    mousePosY = clip(mousePosY, 30., 210.);
    
    slider4 = pow(10, scale(mousePosX, 60., 510, kLog20, kLog20k, 1));
    slider5 = scale(mousePosY, 210., 30., 0.5, 9.0, 1);
    
    slider_automate(slider4);
    slider_automate(slider5);
    
    updateFilterParameters();
);


// Redraw if settings have changed
((displayFreq != prevDisplayFreq) || (q != prevQ) || (prevWidth != gfx_w) || (prevHeight != gfx_h)) ?
(
    // Background
    setRGB(0.7, 0.7, 0.7);
    gfx_rect(0, 0, gfx_w, gfx_h);

    // Filter response curve
    setRGB(0.0, 0.0, 0.0);
    gfx_rect(60,30,450,180);

    setRGBA(1.0, 0.0, 0.5, 1.0);
    gfx_x = 60;
    gfx_y = 210;
    i_gfx = 0;
    loop(450,
        freq = pow(10, scale(i_gfx, 0., 450, kLog20, kLog20k, 1));
        gain = filt0.butbp_query_magnitude(freq);
        gain = clip(gain, -30., 6.);
        gain = scale(gain, 6., -30., 30., 210, 1);
        gfx_lineto(i_gfx+60,gain,1);
        i_gfx += 1;
    );


    // Vertical lines - Hz
    setRGB(0.5, 0.5, 0.5);
    drawFreqLines(    31.25, "31.25");
    drawFreqLines(    62.50, "62.5");
    drawFreqLines(   125.00, "125");
    drawFreqLines(   250.00, "250");
    drawFreqLines(   500.00, "500");
    drawFreqLines(  1000.00, "1k");
    drawFreqLines(  2000.00, "2k");
    drawFreqLines(  4000.00, "4k");
    drawFreqLines(  8000.00, "8k");
    drawFreqLines( 16000.00, "16k");

    // Horisontal lines - dB
    gfx_line(60,  90, 510,  90, 1);
    gfx_line(60, 120, 510, 120, 1);
    gfx_line(60, 150, 510, 150, 1);
    gfx_line(60, 180, 510, 180, 1);

    gfx_y = 31 - 0.5*h;
    drawDbLabel("6");
    drawDbLabel("0");
    drawDbLabel("-6");
    drawDbLabel("-12");
    drawDbLabel("-18");
    drawDbLabel("-24");
    drawDbLabel("-30");

    // Borders
    setRGB(0.9, 0.9, 0.9);
    gfx_line(60,  30, 510,  30, 1);
    gfx_line(60,  60, 510,  60, 1);
    gfx_line(60, 210, 510, 210, 1);

    gfx_line( 60, 30,  60, 210, 1);
    gfx_line(510, 30, 510, 210, 1);

    // Draw interaction circle
    setRGB(0.0, 1.0, 0.5);
    circle_x = scale(log10(displayFreq), kLog20, kLog20k, 60., 510, 1);
    circle_y = scale(bw, 9., 0.5, 30., 210, 1);
    gfx_circle(circle_x, circle_y, 5, 1, 1);
    
    // Update previous values
    prevDisplayFreq = displayFreq;
    prevQ           = q;
);




/********************************************************
*
* Block processing
*
********************************************************/

@block
blockTempo = tempo;

// Delay time in samples, depends on sync mode
(slider1 == 0) ?
(
    samps = (60 * srate * noteDelay) / (tempo * 4)
)
:
(
    samps = slider3 * srate * 0.001;
);



/********************************************************
*
* Sample processing
*
********************************************************/
@sample
// read with cubic interpolation
val0 = d0.delay_fread3(samps);
val1 = d1.delay_fread3(samps);

// write values in ping pong delay lines
d1.delay_write(filt0.butbp_do(spl0 + val0 * feedback));
d0.delay_write(filt1.butbp_do(spl1 + val1 * feedback));

// mix and output
spl0 = spl0 * mixDry + val0 * mixWet;
spl1 = spl1 * mixDry + val1 * mixWet;

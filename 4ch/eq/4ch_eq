desc:4ch_eq - 6 band Equalizer (cookdsp) (Lossius)

import cookdsp.jsfx-inc
import lossius-cookdsp-mods.jsfx-inc

filename:0,../../lib/graphics/OrangeDial.png
filename:1,../../lib/graphics/YellowDial.png
filename:2,../../lib/graphics/CharteuseGreenDial.png
filename:3,../../lib/graphics/SpringGreenDial.png
filename:4,../../lib/graphics/AzureDial.png
filename:5,../../lib/graphics/MagentaDial.png


slider1:75<20,20000,0.1>-Center Frequency - Filter 1
slider2:100<20,20000,0.1>-Center Frequency - Filter 2
slider3:250<20,20000,0.1>-Center Frequency - Filter 3
slider4:750<20,20000,0.1>-Center Frequency - Filter 4
slider5:2500<20,20000,0.1>-Center Frequency - Filter 5
slider6:7500<20,20000,0.1>-Center Frequency - Filter 6

slider7:2<0.01,4,0.01>-Bandwidth (oct) - Filter 1
slider8:2<0.01,4,0.01>-Bandwidth (oct) - Filter 2
slider9:2<0.01,4,0.01>-Bandwidth (oct) - Filter 3
slider10:2<0.01,4,0.01>-Bandwidth (oct) - Filter 4
slider11:2<0.01,4,0.01>-Bandwidth (oct) - Filter 5
slider12:2<0.01,4,0.01>-Bandwidth (oct) - Filter 6

slider13:0<-18,18>-Boost/Cut (dB) - Filter 1
slider14:0<-18,18>-Boost/Cut (dB) - Filter 2
slider15:0<-18,18>-Boost/Cut (dB) - Filter 3
slider16:0<-18,18>-Boost/Cut (dB) - Filter 4
slider17:0<-18,18>-Boost/Cut (dB) - Filter 5
slider18:0<-18,18>-Boost/Cut (dB) - Filter 6

slider19:1<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 1
slider20:0<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 2
slider21:0<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 3
slider22:0<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 4
slider23:0<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 5
slider24:2<0,2,1{Peak/Notch,Lowshelf,Highshelf}>Type - Filter 6

slider25:0<-18,20000>(Optional) Enter value for last clicked knob

in_pin:1
in_pin:2
in_pin:3
in_pin:4

out_pin:1
out_pin:2
out_pin:3
out_pin:4


/********************************************************
*
* Init
*
********************************************************/

@init

kLog20 = log10(20);
kLog20k = log10(20000);

function updateFiltersAndSliders()
(
  // Center freq
  f1_1.eq_set_freq(slider1); 
  f1_2.eq_set_freq(slider1);
  f1_3.eq_set_freq(slider1);
  f1_4.eq_set_freq(slider1);

  f2_1.eq_set_freq(slider2); 
  f2_2.eq_set_freq(slider2);
  f2_3.eq_set_freq(slider2);
  f2_4.eq_set_freq(slider2);

  f3_1.eq_set_freq(slider3); 
  f3_2.eq_set_freq(slider3);
  f3_3.eq_set_freq(slider3);
  f3_4.eq_set_freq(slider3);

  f4_1.eq_set_freq(slider4); 
  f4_2.eq_set_freq(slider4);
  f4_3.eq_set_freq(slider4);
  f4_4.eq_set_freq(slider4);

  f5_1.eq_set_freq(slider5); 
  f5_2.eq_set_freq(slider5);
  f5_3.eq_set_freq(slider5);
  f5_4.eq_set_freq(slider5);

  f6_1.eq_set_freq(slider6); 
  f6_2.eq_set_freq(slider6);
  f6_3.eq_set_freq(slider6);
  f6_4.eq_set_freq(slider6);

  // Bandwidth (oct)

  q = bandwidth2q(slider7);
  f1_1.eq_set_q(q); 
  f1_2.eq_set_q(q);
  f1_3.eq_set_q(q);
  f1_4.eq_set_q(q);

  q = bandwidth2q(slider8);
  f2_1.eq_set_q(q); 
  f2_2.eq_set_q(q);
  f2_3.eq_set_q(q);
  f2_4.eq_set_q(q);

  q = bandwidth2q(slider8);
  f3_1.eq_set_q(q); 
  f3_2.eq_set_q(q);
  f3_3.eq_set_q(q);
  f3_4.eq_set_q(q);

  q = bandwidth2q(slider9);
  f4_1.eq_set_q(q); 
  f4_2.eq_set_q(q);
  f4_3.eq_set_q(q);
  f4_4.eq_set_q(q);

  q = bandwidth2q(slider11);
  f5_1.eq_set_q(q); 
  f5_2.eq_set_q(q);
  f5_3.eq_set_q(q);
  f5_4.eq_set_q(q);

  q = bandwidth2q(slider12);
  f6_1.eq_set_q(q); 
  f6_2.eq_set_q(q);
  f6_3.eq_set_q(q);
  f6_4.eq_set_q(q);

  // Gain

  f1_1.eq_set_boost(slider13);
  f1_2.eq_set_boost(slider13);
  f1_3.eq_set_boost(slider13);
  f1_4.eq_set_boost(slider13);

  f2_1.eq_set_boost(slider14);
  f2_2.eq_set_boost(slider14);
  f2_3.eq_set_boost(slider14);
  f2_4.eq_set_boost(slider14);

  f3_1.eq_set_boost(slider15);
  f3_2.eq_set_boost(slider15);
  f3_3.eq_set_boost(slider15);
  f3_4.eq_set_boost(slider15);

  f4_1.eq_set_boost(slider16);
  f4_2.eq_set_boost(slider16);
  f4_3.eq_set_boost(slider16);
  f4_4.eq_set_boost(slider16);

  f5_1.eq_set_boost(slider17);
  f5_2.eq_set_boost(slider17);
  f5_3.eq_set_boost(slider17);
  f5_4.eq_set_boost(slider17);

  f6_1.eq_set_boost(slider18);
  f6_2.eq_set_boost(slider18);
  f6_3.eq_set_boost(slider18);
  f6_4.eq_set_boost(slider18);

  // Filter type

  f1_1.eq_set_type(slider19);
  f1_2.eq_set_type(slider19);
  f1_3.eq_set_type(slider19);
  f1_4.eq_set_type(slider19);

  f2_1.eq_set_type(slider20);
  f2_2.eq_set_type(slider20);
  f2_3.eq_set_type(slider20);
  f2_4.eq_set_type(slider20);

  f3_1.eq_set_type(slider21);
  f3_2.eq_set_type(slider21);
  f3_3.eq_set_type(slider21);
  f3_4.eq_set_type(slider21);

  f4_1.eq_set_type(slider22);
  f4_2.eq_set_type(slider22);
  f4_3.eq_set_type(slider22);
  f4_4.eq_set_type(slider22);

  f5_1.eq_set_type(slider23);
  f5_2.eq_set_type(slider23);
  f5_3.eq_set_type(slider23);
  f5_4.eq_set_type(slider23);

  f6_1.eq_set_type(slider24);
  f6_2.eq_set_type(slider24);
  f6_3.eq_set_type(slider24);
  f6_4.eq_set_type(slider24);

  // Filter Freq knobs
  filter1Freq.knobSetSlider( scale(log10(slider1), kLog20, kLog20k, 0., 1., 1) );
  filter2Freq.knobSetSlider( scale(log10(slider2), kLog20, kLog20k, 0., 1., 1) );
  filter3Freq.knobSetSlider( scale(log10(slider3), kLog20, kLog20k, 0., 1., 1) );
  filter4Freq.knobSetSlider( scale(log10(slider4), kLog20, kLog20k, 0., 1., 1) );
  filter5Freq.knobSetSlider( scale(log10(slider5), kLog20, kLog20k, 0., 1., 1) );
  filter6Freq.knobSetSlider( scale(log10(slider6), kLog20, kLog20k, 0., 1., 1) );

  filter1Freq.knobSetDisplayedValue(slider1);
  filter2Freq.knobSetDisplayedValue(slider2);
  filter3Freq.knobSetDisplayedValue(slider3);
  filter4Freq.knobSetDisplayedValue(slider4);
  filter5Freq.knobSetDisplayedValue(slider5);
  filter6Freq.knobSetDisplayedValue(slider6);

  // Filter BW knobs
  filter1Bandwidth.knobSetSlider(scale(slider7,  0.01, 4, 0., 1., 1));
  filter2Bandwidth.knobSetSlider(scale(slider8,  0.01, 4, 0., 1., 1));
  filter3Bandwidth.knobSetSlider(scale(slider9,  0.01, 4, 0., 1., 1));
  filter4Bandwidth.knobSetSlider(scale(slider10, 0.01, 4, 0., 1., 1));
  filter5Bandwidth.knobSetSlider(scale(slider11, 0.01, 4, 0., 1., 1));
  filter6Bandwidth.knobSetSlider(scale(slider12, 0.01, 4, 0., 1., 1));

  filter1Bandwidth.knobSetDisplayedValue(slider7);
  filter2Bandwidth.knobSetDisplayedValue(slider8);
  filter3Bandwidth.knobSetDisplayedValue(slider9);
  filter4Bandwidth.knobSetDisplayedValue(slider10);
  filter5Bandwidth.knobSetDisplayedValue(slider11);
  filter6Bandwidth.knobSetDisplayedValue(slider12);

  // Filter gain knobs
  filter1Gain.knobSetSlider(scale(slider13, -18., 18., 0., 1., 1.));
  filter2Gain.knobSetSlider(scale(slider14, -18., 18., 0., 1., 1.));
  filter3Gain.knobSetSlider(scale(slider15, -18., 18., 0., 1., 1.));
  filter4Gain.knobSetSlider(scale(slider16, -18., 18., 0., 1., 1.));
  filter5Gain.knobSetSlider(scale(slider17, -18., 18., 0., 1., 1.));
  filter6Gain.knobSetSlider(scale(slider18, -18., 18., 0., 1., 1.));

  filter1Gain.knobSetDisplayedValue(slider13);
  filter2Gain.knobSetDisplayedValue(slider14);
  filter3Gain.knobSetDisplayedValue(slider15);
  filter4Gain.knobSetDisplayedValue(slider16);
  filter5Gain.knobSetDisplayedValue(slider17);
  filter6Gain.knobSetDisplayedValue(slider18);
);


gfx_clear=-1;

// Set up knobs
filter1Freq.knob( 50, 220, 0, 101, 50, 50, "Freq", "Hz");
filter2Freq.knob(130, 220, 1, 101, 50, 50, "Freq", "Hz");
filter3Freq.knob(210, 220, 2, 101, 50, 50, "Freq", "Hz");
filter4Freq.knob(290, 220, 3, 101, 50, 50, "Freq", "Hz");
filter5Freq.knob(370, 220, 4, 101, 50, 50, "Freq", "Hz");
filter6Freq.knob(450, 220, 5, 101, 50, 50, "Freq", "Hz");

filter1Bandwidth.knob( 50, 310, 0, 101, 50, 50, "Bandwidth", "oct");
filter2Bandwidth.knob(130, 310, 1, 101, 50, 50, "Bandwidth", "oct");
filter3Bandwidth.knob(210, 310, 2, 101, 50, 50, "Bandwidth", "oct");
filter4Bandwidth.knob(290, 310, 3, 101, 50, 50, "Bandwidth", "oct");
filter5Bandwidth.knob(370, 310, 4, 101, 50, 50, "Bandwidth", "oct");
filter6Bandwidth.knob(450, 310, 5, 101, 50, 50, "Bandwidth", "oct");

filter1Gain.knob(50,  400, 0, 101, 50, 50, "Gain", "dB");
filter2Gain.knob(130, 400, 1, 101, 50, 50, "Gain", "dB");
filter3Gain.knob(210, 400, 2, 101, 50, 50, "Gain", "dB");
filter4Gain.knob(290, 400, 3, 101, 50, 50, "Gain", "dB");
filter5Gain.knob(370, 400, 4, 101, 50, 50, "Gain", "dB");
filter6Gain.knob(450, 400, 5, 101, 50, 50, "Gain", "dB");


// Set up filters
q = bandwidth2q(slider7);
f1_1.eq(slider1, q, slider13, slider19);
f1_2.eq(slider1, q, slider13, slider19);
f1_3.eq(slider1, q, slider13, slider19);
f1_4.eq(slider1, q, slider13, slider19);

q = bandwidth2q(slider8);
f2_1.eq(slider2, q, slider14, slider20);
f2_2.eq(slider2, q, slider14, slider20);
f2_3.eq(slider2, q, slider14, slider20);
f2_4.eq(slider2, q, slider14, slider20);

q = bandwidth2q(slider9);
f3_1.eq(slider3, q, slider15, slider21);
f3_2.eq(slider3, q, slider15, slider21);
f3_3.eq(slider3, q, slider15, slider21);
f3_4.eq(slider3, q, slider15, slider21);

q = bandwidth2q(slider10);
f4_1.eq(slider4, q, slider16, slider22);
f4_2.eq(slider4, q, slider16, slider22);
f4_3.eq(slider4, q, slider16, slider22);
f4_4.eq(slider4, q, slider16, slider22);

q = bandwidth2q(slider11);
f5_1.eq(slider5, q, slider17, slider23);
f5_2.eq(slider5, q, slider17, slider23);
f5_3.eq(slider5, q, slider17, slider23);
f5_4.eq(slider5, q, slider17, slider23);

q = bandwidth2q(slider12);
f6_1.eq(slider6, q, slider18, slider24);
f6_2.eq(slider6, q, slider18, slider24);
f6_3.eq(slider6, q, slider18, slider24);
f6_4.eq(slider6, q, slider18, slider24);


/********************************************************
*
* Sliders
*
********************************************************/
@slider

// slider25 when changed sets value of most recently clicked GUI slider
(slider25 != prevSlider25) ? (
  mouseClick == 1 ? slider1 = clip(slider25, 20, 20000);
  mouseClick == 2 ? slider2 = clip(slider25, 20, 20000);
  mouseClick == 3 ? slider3 = clip(slider25, 20, 20000);
  mouseClick == 4 ? slider4 = clip(slider25, 20, 20000);
  mouseClick == 5 ? slider5 = clip(slider25, 20, 20000);
  mouseClick == 6 ? slider6 = clip(slider25, 20, 20000);
  
  mouseClick ==  7 ? slider7  = clip(slider25, 0.01, 4);
  mouseClick ==  8 ? slider8  = clip(slider25, 0.01, 4);
  mouseClick ==  9 ? slider9  = clip(slider25, 0.01, 4);
  mouseClick == 10 ? slider10 = clip(slider25, 0.01, 4);
  mouseClick == 11 ? slider11 = clip(slider25, 0.01, 4);
  mouseClick == 12 ? slider12 = clip(slider25, 0.01, 4);
  
  mouseClick == 13 ? slider13 = clip(slider25, -18, 18);
  mouseClick == 14 ? slider14 = clip(slider25, -18, 18);
  mouseClick == 15 ? slider15 = clip(slider25, -18, 18);
  mouseClick == 16 ? slider16 = clip(slider25, -18, 18);
  mouseClick == 17 ? slider17 = clip(slider25, -18, 18);
  mouseClick == 18 ? slider18 = clip(slider25, -18, 18);
  
  prevSlider25 = slider25;
);

updateFiltersAndSliders();

/********************************************************
*
* Graphics
*
********************************************************/
@gfx 570 500

// Mouse interaction
(mouse_cap > 0) ? (
  
  // Determine what widget has been clicked
  (mouseOnWidget == 0) ? (
    // mouseClick tracks last clicked widget
    filter1Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 1;
    filter2Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 2;
    filter3Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 3;
    filter4Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 4;
    filter5Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 5;
    filter6Freq.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 6;
    
    filter1Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 7;
    filter2Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 8;
    filter3Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 9;
    filter4Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 10;
    filter5Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 11;
    filter6Bandwidth.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 12;
    
    filter1Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 13;
    filter2Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 14;
    filter3Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 15;
    filter4Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 16;
    filter5Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 17;
    filter6Gain.knobMouseOverWidget() ? mouseOnWidget = mouseClick = 18;
    
    // Initial mouse position on click
    prevMouseX = mouse_x;
    prevMouseY = mouse_y;
  );
  
  // Processing for clicked widget and update slider value accodingly
  
  // Freq widgets
  mouseOnWidget == 1 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter1Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider1 = pow(10, scale(filter1Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider1 = 75;
    );
    slider_automate(slider1);
  );
  
  mouseOnWidget == 2 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter2Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider2 = pow(10, scale(filter2Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider2 = 100;
    );
    slider_automate(slider2);
  );
  
  mouseOnWidget == 3 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter3Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider3 = pow(10, scale(filter3Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider3 = 250;
    );
    slider_automate(slider3);
  );
  
  mouseOnWidget == 4 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter4Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider4 = pow(10, scale(filter4Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider4 = 750;
    );
    slider_automate(slider4);
  );
  
  mouseOnWidget == 5 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter5Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider5 = pow(10, scale(filter5Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider5 = 2500;
    );
    slider_automate(slider5);
  );
  
  mouseOnWidget == 6 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter6Freq.knobInc(0.001*(prevMouseY-mouse_y));
      slider6 = pow(10, scale(filter6Freq.knobGetSlider(), 0., 1., kLog20, kLog20k, 1));
    ) : (mouse_cap == 2) ? (
      slider6 = 7500;
    );
    slider_automate(slider6);
  );
  
  
  // Bandwidth widgets
  mouseOnWidget == 7 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter1Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider7 = scale(filter1Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider7 = 2;
    );
    slider_automate(slider7);
  ); 
  
  mouseOnWidget == 8 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter2Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider8 = scale(filter2Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider8 = 2;
    );
    slider_automate(slider8);
  );
  
  mouseOnWidget == 9 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter3Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider9 = scale(filter3Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider9 = 2;
    );
    slider_automate(slider9);
  );
  
  mouseOnWidget == 10 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter4Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider10 = scale(filter4Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider10 = 2;
    );
    slider_automate(slider10);
  );
  
  mouseOnWidget == 11 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter5Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider11 = scale(filter5Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider11 = 2;
    );
    slider_automate(slider11);
  );
  
  mouseOnWidget == 12 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter6Bandwidth.knobInc(0.001*(prevMouseY-mouse_y));
      slider12 = scale(filter6Bandwidth.knobGetSlider(), 0., 1., 0.01, 4., 1);
    ) : (mouse_cap == 2) ? (
      slider12 = 2;
    );
    slider_automate(slider12);
  );
  
  
  // Gain widgets
  mouseOnWidget == 13 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter1Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider13 = scale(filter1Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider13 = 0;
    );
    slider_automate(slider13);
  );
  
  mouseOnWidget == 14 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter2Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider14 = scale(filter2Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider14 = 0;
    );
    slider_automate(slider14);
  );
  
  mouseOnWidget == 15 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter3Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider15 = scale(filter3Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider15 = 0;
    );
    slider_automate(slider15);
  );
  
  mouseOnWidget == 16 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter4Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider16 = scale(filter4Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider16 = 0;
    );
    slider_automate(slider16);
  );
  
  mouseOnWidget == 17 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter5Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider17 = scale(filter5Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider17 = 0;
    );
    slider_automate(slider17);
  );
  
  mouseOnWidget == 18 ? (
    mouse_cap == 1 ? (
      // Addresses increments as well as decrements
      filter6Gain.knobInc(0.001*(prevMouseY-mouse_y));
      slider18 = scale(filter6Gain.knobGetSlider(), 0., 1., -18., 18., 1);
    ) : (mouse_cap == 2) ? (
      slider18 = 0;
    );
    slider_automate(slider18);
  );
  
  updateFiltersAndSliders();
  
  // Store current mouse position
  prevMouseX = mouse_x;
  prevMouseY = mouse_y;
) : (
  // No active (clicked) widget
  mouseOnWidget = 0;
  
  // Set hover attribute
  filter1Freq.hover = filter1Freq.knobMouseOverWidget();
  filter2Freq.hover = filter2Freq.knobMouseOverWidget();
  filter3Freq.hover = filter3Freq.knobMouseOverWidget();
  filter4Freq.hover = filter4Freq.knobMouseOverWidget();
  filter5Freq.hover = filter5Freq.knobMouseOverWidget();
  filter6Freq.hover = filter6Freq.knobMouseOverWidget();

  filter1Bandwidth.hover = filter1Bandwidth.knobMouseOverWidget();
  filter2Bandwidth.hover = filter2Bandwidth.knobMouseOverWidget();
  filter3Bandwidth.hover = filter3Bandwidth.knobMouseOverWidget();
  filter4Bandwidth.hover = filter4Bandwidth.knobMouseOverWidget();
  filter5Bandwidth.hover = filter5Bandwidth.knobMouseOverWidget();
  filter6Bandwidth.hover = filter6Bandwidth.knobMouseOverWidget();
    
  filter1Gain.hover = filter1Gain.knobMouseOverWidget();
  filter2Gain.hover = filter2Gain.knobMouseOverWidget();
  filter3Gain.hover = filter3Gain.knobMouseOverWidget();
  filter4Gain.hover = filter4Gain.knobMouseOverWidget();
  filter5Gain.hover = filter5Gain.knobMouseOverWidget();
  filter6Gain.hover = filter6Gain.knobMouseOverWidget();
);



// Background
setRGB(0.7, 0.7, 0.7);
gfx_rect(0, 0, gfx_w, gfx_h);

filter1Freq.knobDraw();
filter2Freq.knobDraw();
filter3Freq.knobDraw();
filter4Freq.knobDraw();
filter5Freq.knobDraw();
filter6Freq.knobDraw();

filter1Gain.knobDraw();
filter2Gain.knobDraw();
filter3Gain.knobDraw();
filter4Gain.knobDraw();
filter5Gain.knobDraw();
filter6Gain.knobDraw();

filter1Bandwidth.knobDraw();
filter2Bandwidth.knobDraw();
filter3Bandwidth.knobDraw();
filter4Bandwidth.knobDraw();
filter5Bandwidth.knobDraw();
filter6Bandwidth.knobDraw();

// Filter response curves
setRGB(0.0, 0.0, 0.0);
gfx_rect(60,30,450,180);

i_gfx = 0;
loop(450,
  freq = pow(10, scale(i_gfx, 0., 450, kLog20, kLog20k, 1));
  gainAccum = 1.0;
  
  setRGBA(1.0, 0.5, 0.0, 0.7);
  gain = f1_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(1.0, 1.0, 0.0, 0.7);
  gain = f2_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(0.5, 1.0, 0.0, 0.7);
  gain = f3_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(0.0, 1.0, 0.5, 0.7);
  gain = f4_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(0.0, 0.5, 1.0, 0.7);
  gain = f5_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(1.0, 0.0, 1.0, 0.7);
  gain = f6_1.eq_query_magnitude(freq);
  gainAccum = gainAccum*dbtoa(gain);
  gain = clip(gain, -18., 18.);
  gain = scale(gain, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gain, 1.);
  
  setRGBA(0.5, 0.5, 0.5, 0.5);
  gainAccum = atodb(gainAccum);
  gainAccum = clip(gainAccum, -18., 18.);
  gainAccum = scale(gainAccum, 18., -18., 210., 30, 1);
  gfx_line(i_gfx+60, 120., i_gfx+60, gainAccum, 1.);
  
  setRGBA(1.0, 1.0., 1.0, 1.0);
  //gfx_line(i_gfx+60, gainAccum-0.5, i_gfx+60, gainAccum+0.5, 1.);
  
  gfx_circle(i_gfx+60,gainAccum,0.6,1,1);
  
  i_gfx += 1;
);


// Vertical lines - Hz
function drawFreqLines(freq, label)
(
  x = scale(log10(freq), kLog20, kLog20k, 60., 510, 1);
  gfx_line(x, 30, x, 210, 1);
  gfx_measurestr(label, w, h);
  gfx_x = x - 0.5*w;
  gfx_y = 16;
  gfx_drawstr(label);
);

setRGB(0.5, 0.5, 0.5);
drawFreqLines(    31.25, "31.25");
drawFreqLines(    62.50, "62.5");
drawFreqLines(   125.00, "125");
drawFreqLines(   250.00, "250");
drawFreqLines(   500.00, "500");
drawFreqLines(  1000.00, "1k");
drawFreqLines(  2000.00, "2k");
drawFreqLines(  4000.00, "4k");
drawFreqLines(  8000.00, "8k");
drawFreqLines( 16000.00, "16k");

// Horisontal lines - dB
gfx_line(60,  60, 510,  60, 1);
gfx_line(60,  90, 510,  90, 1);
gfx_line(60, 150, 510, 150, 1);
gfx_line(60, 180, 510, 180, 1);

function drawDbLabel(label)
(
  gfx_measurestr(label, w, h);
  gfx_x = 524 -0.5*w;
  gfx_drawstr(label);
  gfx_y += 30;
);

gfx_y = 31 - 0.5*h;
drawDbLabel("18");
drawDbLabel("12");
drawDbLabel("6");
drawDbLabel("0");
drawDbLabel("-6");
drawDbLabel("-12");
drawDbLabel("-18");

// Borders
setRGB(0.9, 0.9, 0.9);
gfx_line(60,  30, 510,  30, 1);
gfx_line(60, 120, 510, 120, 1);
gfx_line(60, 210, 510, 210, 1);

gfx_line( 60, 30,  60, 210, 1);
gfx_line(510, 30, 510, 210, 1);


/********************************************************
*
* Sample processing
*
********************************************************/
@sample

// Cascading filterbank
spl0 = f1_1.eq_do(spl0);
spl1 = f1_2.eq_do(spl1);
spl2 = f1_3.eq_do(spl2);
spl3 = f1_4.eq_do(spl3);

spl0 = f2_1.eq_do(spl0);
spl1 = f2_2.eq_do(spl1);
spl2 = f2_3.eq_do(spl2);
spl3 = f2_4.eq_do(spl3);

spl0 = f3_1.eq_do(spl0);
spl1 = f3_2.eq_do(spl1);
spl2 = f3_3.eq_do(spl2);
spl3 = f3_4.eq_do(spl3);

spl0 = f4_1.eq_do(spl0);
spl1 = f4_2.eq_do(spl1);
spl2 = f4_3.eq_do(spl2);
spl3 = f4_4.eq_do(spl3);

spl0 = f5_1.eq_do(spl0);
spl1 = f5_2.eq_do(spl1);
spl2 = f5_3.eq_do(spl2);
spl3 = f5_4.eq_do(spl3);

spl0 = f6_1.eq_do(spl0);
spl1 = f6_2.eq_do(spl1);
spl2 = f6_3.eq_do(spl2);
spl3 = f6_4.eq_do(spl3);

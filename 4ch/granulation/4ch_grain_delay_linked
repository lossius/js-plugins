*
 This plug is based on example code from cookdsp.

 cookdsp is copyright (c) - 2014 - Olivier Belanger
 Permission to use, copy, modify, and/or distribute this
 software for any purpose with or without fee is hereby
 granted, provided that the above copyright notice and this
 permission notice appear in all copies. CookDSP IS PROVIDED
 "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.
*/

desc:4ch Grain Delay - Linked Channels (cookdsp) (Lossius)

slider1:8<1,64,1>Number Of Grains
slider2:100<1,500,1>Grain Duration (ms)
slider3:125<0,1500,1>Delay (ms)
slider4:0<0,500,1>Delay Randomisation (ms)
slider5:0<-36.,12.,0.01>Transposition (MIDI)
slider6:0.1<0,1>Random Transposition
slider7:0<0,95>Feedback (%)
slider8:0<0,1,1{Forward,reverse}>Grain Direction (not yet implemented)
slider9:0<0,1,1{No correction needed,Correcting delay time to prevent overshooting}>Correction Status

in_pin:1
in_pin:2
in_pin:3
in_pin:4

out_pin:1
out_pin:2
out_pin:3
out_pin:4

import cookdsp.jsfx-inc
import 4ch-granulator.jsfx-inc

@init

// Initializes granulator with an internal memory of 4 seconds.
// 4 seconds is more than enough with the parameter ranges set for this plugin
// To calculate needed buffer size: Max delay + Max Delay Random + Max Grain Duration * Max Speed
kBufLen = 4;
buf = graindelay.foa_graindelay(num, dur, delay, delayrnd, pitch, pitrnd, feedback, kBufLen)


@slider
num = slider1;
dur = slider2*0.001;
delay = slider3 * 0.001;
delayrnd = slider4 * 0.001;
pitch = pow(2,(slider5/12.));
pitrnd = slider6;
feedback = slider7;

// Sets all parameters at once.
graindelay.foa_graindelay_set(num, dur, delay, delayrnd, pitch, pitrnd, feedback)


@block
slider9 = graindelay.foa_graindelay_get_status();
sliderchange(slider9);

@sample
tmp_ = graindelay.foa_graindelay_do(spl0, spl1, spl2, spl3); 
spl0 = tmp_[0];
spl1 = tmp_[1];
spl2 = tmp_[2];
spl3 = tmp_[3];

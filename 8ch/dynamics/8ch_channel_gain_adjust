/*
 Copyright - Trond Lossius, 2016
 License: New BSD license
 
 This plug use the cookdsp library.

 cookdsp is copyright (c) - 2014 - Olivier Belanger
 Permission to use, copy, modify, and/or distribute this
 software for any purpose with or without fee is hereby
 granted, provided that the above copyright notice and this
 permission notice appear in all copies. CookDSP IS PROVIDED
 "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.
*/

desc:8ch Dynamics - Channel Gain Adjust (cookdsp) (Lossius)

slider1:0<-12,12,0.1>Gain Channnel 1 (dB)
slider2:0<-12,12,0.1>Gain Channnel 2 (dB)
slider3:0<-12,12,0.1>Gain Channnel 3 (dB)
slider4:0<-12,12,0.1>Gain Channnel 4 (dB)
slider5:0<-12,12,0.1>Gain Channnel 5 (dB)
slider6:0<-12,12,0.1>Gain Channnel 6 (dB)
slider7:0<-12,12,0.1>Gain Channnel 7 (dB)
slider8:0<-12,12,0.1>Gain Channnel 8 (dB)

in_pin:1
in_pin:2
in_pin:3
in_pin:4
in_pin:5
in_pin:6
in_pin:7
in_pin:8

out_pin:1
out_pin:2
out_pin:3
out_pin:4
out_pin:5
out_pin:6
out_pin:7
out_pin:8


import cookdsp.jsfx-inc

@init

kNumChannels = 8;

// Memory assignments - using cookdsp
gain     = memalloc(kNumChannels);
nextGain = memalloc(kNumChannels);
inc      = memalloc(kNumChannels);

@slider
nextGain[0] = dbtoa(slider1);
nextGain[1] = dbtoa(slider2);
nextGain[2] = dbtoa(slider3);
nextGain[3] = dbtoa(slider4);
nextGain[4] = dbtoa(slider5);
nextGain[5] = dbtoa(slider6);
nextGain[6] = dbtoa(slider7);
nextGain[7] = dbtoa(slider8);

@block
iblock = 0;

loop(kNumChannels,
  inc[iblock] = (nextGain[iblock] - gain[iblock])/samplesblock;
  iblock += 1;
);



@sample
isample = 0;
loop(kNumChannels,
  gain[isample] += inc[isample];
  spl(isample) = spl(isample)*gain[isample];
  isample += 1;
);

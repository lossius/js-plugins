// Copyright (c) 2013, Trond Lossius
// All rights reserved.

// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of the Trond Lossius nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc: 1st order ambisonic horisontal super stereo encoding

// This effect encodes a stereo source to 1st order ambisonics WXYZ signals. It uses SpatDIF coordinate conventions rather than mathematical: 0 degrees azimuth is forward, +90 degrees azimuth to the right, 0 degrees elevation in the horisontal plane, +90 degrees elevation is upwards. The code is based on a mail at the sursound list back in 2005, providing the following formula, and subsequent Yaw rotation according to [1].

// Super Stereo:
// W' = 0.65 S - 0.27 j D (a /180)
// X' = 0.98 S + 0.40 j D (a /180)
// Y' = 0.75 D (a /180)
//
// where:
// S = Left + Right
// D = Left - Right
// a = Width control, varying between 0 and 180?
// j = 90? phase shift
//
//
// REFERENCES:
//
// [1] Malham, Dave (1998): Spatial Hearing Mechanisms and Sound Reproduction. Available online at http://www.york.ac.uk/inst/mustech/3d_audio/ambis2.htm

// Azimuth slider range is set to [-360,360] rather than [-180, 180] for more flexible scripting of rotating movements
slider1:0<-360,360,1>Azimuth (degrees)
slider2:60<-0,180,1>Width (degrees)

in_pin:L
in_pin:R

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

@slider
azimuth = (slider1*3.14159265359)/180.;
cosAzimuth = cos(azimuth);
sinAzimuth = sin(azimuth);
widthComponent = slider2 / 180.;

@sample
// Calculate Mid and Side
Mid  = spl0 + spl1;
Side = spl0 - spl1;

// First position centered
spl0 = 0.65 * Mid - 0.27 * Side * widthComponent;
x    = 0.98 * Mid + 0.40 * Side * widthComponent;
y    =              0.75 * Side * widthComponent;
spl1 =  x * cosAzimuth + y * sinAzimuth;
spl2 = -x * sinAzimuth + y * cosAzimuth;
spl3 = 0.;

// Yaw rotation alters X and Y signals. We use SpatDIF (navigational) coordinate system rather than mathematical. Hence we need to invert sign of sinA as compared to Malham's formula.
//spl1 =   x * cosAzimuth + y * sinAzimuth;
//spl2 = - x * sinAzimuth + y * cosAzimuth;

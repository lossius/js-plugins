/*
	This is an port of an UGen from Ambisonics Toolkit (ATK) for SuperCollider 
	for use as a JS plugin with Reaper, ported in april 2013 by Trond Lossius.

	Trond Lossius, trond.lossius@bek.no



	Copyright the ATK Community, Joseph Anderson, and Josh Parmenter, 2011
	J Anderson	j.anderson[at]ambisonictoolkit.net
	J Parmenter	j.parmenter[at]ambisonictoolkit.net 
  

	This file is part of SuperCollider3 version of the Ambisonic Toolkit (ATK).

	The SuperCollider3 version of the Ambisonic Toolkit (ATK) is free software:
	you can redistribute it and/or modify it under the terms of the GNU General
	Public License as published by the Free Software Foundation, either version 3
	of the License, or (at your option) any later version.

	The SuperCollider3 version of the Ambisonic Toolkit (ATK) is distributed in
	the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
	the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along with the
	SuperCollider3 version of the Ambisonic Toolkit (ATK). If not, see
	<http://www.gnu.org/licenses/>.
*/


desc: Apply press to a Bformat ambisonics sound field in the back-front direction

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:0<-1.,1.,0.01>back - normal - front


/**********************************************************
Updated slider value:
**********************************************************/
@slider

angle = slider1 * 3.14159265359 * 0.5;

// zero matrix, but commenting out the ones that we'll calculate afterwards:

//matrix00 = 0.;
matrix01 = 0.;
matrix02 = 0.;
matrix03 = 0.;

//matrix10 = 0.;
//matrix11 = 0.;
matrix12 = 0.;
matrix13 = 0.;

matrix20 = 0.;
matrix21 = 0.;
//matrix22 = 0.;
matrix23 = 0.;

matrix30 = 0.;
matrix31 = 0.;
matrix32 = 0.;
//matrix33 = 0.;

matrix00 = 1.;
matrix10 = sqrt(2) * sin(abs(angle)) * sin(angle);
matrix22 = cos(angle);
matrix33 = matrix22;
matrix11 = matrix22 * matrix22;



/**********************************************************
Calculate audio sample
**********************************************************/
@sample
wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Matrix multiplication with input signal:
spl0 = wIn * matrix00 + xIn * matrix01 + yIn * matrix02 + zIn * matrix03;
spl1 = wIn * matrix10 + xIn * matrix11 + yIn * matrix12 + zIn * matrix13;
spl2 = wIn * matrix20 + xIn * matrix21 + yIn * matrix22 + zIn * matrix23;
spl3 = wIn * matrix30 + xIn * matrix31 + yIn * matrix32 + zIn * matrix33;

/*
This plugin is a modification by Trond Lossius of code from cookdsp.
*/

/////////////////////////////////////////////////////////////////
// cookdsp is copyright (c) - 2015 - Olivier Belanger          //
// Permission to use, copy, modify, and/or distribute this     //
// software for any purpose with or without fee is hereby      //
// granted, provided that the above copyright notice and this  //
// permission notice appear in all copies. CookDSP IS PROVIDED //
// "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.      //
/////////////////////////////////////////////////////////////////

@init

/******************************************************* 
FOA_GRAINS
==========

Simple first order ambisonics granular synthesis generator.

Description
-----------

The `foa_grains` object implements a 4 channel synchronous granular synthesis.
There will be `num` grains with their starting point equally spaced 
in time over the duration specified with the `dur` parameter. It uses
an internal tuckey window function as the grain envelope. Four channels
of audio are buffered, and the granulator produce four-channel grains.
This makes it well suited for granulation of first order ambisonic
A-format and B-format signals.

It must be used with a variable name as prefix (object oriented).

Initializer
-----------

#### foa_grains(num, pitch, pos, dur, pitrnd, posrnd, maxlen) ####

The `foa_grains` function initializes a synchronous granular synthesis
generator. It provides control over the number of overlapped grains
(`num`), the overall transposition (`pitch`), the position of the
playback pointer (`pos`), normalized between 0 and 1 and the duration,
in seconds, of the grains (`dur`). The arguments `pitrnd` and `posrnd`
control the amount of random applied to the pitch and the playback 
position of each grain (regardless of the values of the other grains).
These arguments are normalized between 0 and 1. The `maxlen` argument
is the length of the internal memory, in seconds, allocated at 
initialization time. This space will be used to record the samples
to be granulated.

Methods
-------

#### foa_grains_record(state) ####

If `state` is 1, the object starts recording the samples given as
argument to `foa_grains_do` method into the internal memory space. A
`state` of 0 stops the recording and switch back to the playing mode.
If the recording reach the end of the internal memory, the recording
is stopped automatically.

#### foa_grains_set(num, pitch, pos, dur, pitrnd, posrnd) ####

Sets all parameters at once. See other methods for more details.

#### foa_grains_set_num(num) ####

Sets a new number of overlapped grains `num`. The maximum number of
grains is 128.

#### foa_grains_set_pitch(pitch) ####

Sets a new transposition factor `pitch` (1 means no transposition).

#### foa_grains_set_pos(pos) ####

Sets a new playback position `pos`, normalized between 0 (beginning) 
and 1 (end), into the recording chunk.

#### foa_grains_set_dur(dur) ####

Sets a new grain duration `dur`, in seconds.

#### foa_grains_set_pitrnd(pitrnd) ####

Sets a new pitch random factor, between 0 (no transposition) and 1
(full range random transposition).

#### foa_grains_set_posrnd(posrnd) ####

Sets a new position random factor, between 0 (no deviation) and 1
(full range random deviation).

#### foa_grains_do(signal) ####

Processes one 4-channel samples of an input signal `signal` 
and outputs the processed sample.

Example
-------

    desc:Surround 4ch Simple Granulator

    slider1:24<1,64,1>Number Of Grains
    slider2:0<-24.,24.,0.01>Transposition
    slider3:0.5<0,1>Reading Position
    slider4:0.1<0.01,0.5>Grain Duration
    slider5:0.1<0,1>Random Transposition
    slider6:0.1<0,1>Random Position
    slider7:0<0,1,1{Playing,Recording}>Play/Record Mode

    in_pin:1
    in_pin:2
    in_pin:3
    in_pin:4
    
    out_pin:1
    out_pin:2
    out_pin:3
    out_pin:4

    import cookdsp.jsfx-inc

    @init
    // Initializes 2 granulators with an internal memory of 10 seconds.
    bufL = grL.foa_grains(slider1, slider2, slider3, slider4, slider5, slider6, 10);
    bufR = grR.foa_grains(slider1, slider2, slider3, slider4, slider5, slider6, 10);

    @slider
    speed = pow(2,(slider2/12.));
    // Sets all parameters at once.
    grL.foa_grains_set(slider1, speed, slider3, slider4, slider5, slider6);
    grR.foa_grains_set(slider1, speed, slider3, slider4, slider5, slider6);
    // We need to record some samples in memory to be able to granulate them.
    grL.foa_grains_record(slider7);
    grR.foa_grains_record(slider7);

    @sample
    // Only output signal when in playing state.
    play_state == 1 ? (
        tmp_ = grL.foa_grains_do(spl0, spl1, spl2, spl3); 
        spl0 = tmp_[0];
        spl1 = tmp_[1];
        spl2 = tmp_[2];
        spl3 = tmp_[3];
    );

********************************************************/

// Private functions
function _foa_grains_init_memories()
(
    this.startpos = memalloc(128);
    this.gsize = memalloc(128);
    this.gphase = memalloc(128);
    this.lastpos = memalloc(128);
);

function _foa_grains_reset_memories()
(
    memset(this.startpos, 0, 128);
    memset(this.gsize, 0, 128);
    memset(this.gphase, 0, 128);
    memset(this.lastpos, 0, 128);
);

function _foa_grains_compute_phase_inc()
(
    this.dur == 0 ? durtosamps_ = 0 : durtosamps_ = (1 / this.dur) / srate;
    this.inc = this.pitch * durtosamps_;
);

// grains setter functions
function foa_grains_set_num(num)
(
    num != this.num ? (
        num > 128 ? num = 128;
        this.num = num;
        num <= 24 ? (
            this.gain = pow(10, -num/2 * 0.05);
        ) : (
            this.gain = pow(10, -12 * 0.05);
        );
        this._foa_grains_reset_memories();
        nc_ = 0;
        loop(num,
            ph_ = (nc_/num) * (1.0 + (rand(2)-1) * 0.01);
            ph_ < 0 ? ph_ = 0 : ph_ >= 1 ? ph_ -= 1;
            this.gphase[nc_] = ph_;
            this.lastpos[nc_] = 1;
            nc_ += 1;
        );
    );
);

function foa_grains_set_pitch(pitch)
(
    pitch != this.pitch ? (
        this.pitch = pitch;
        this._foa_grains_compute_phase_inc();
    );
);

function foa_grains_set_pos(pos)
(
    pos < 0 ? pos = 0 : pos > 1 ? pos = 1;
    this.pos = pos;
);

function foa_grains_set_dur(dur)
(
    dur != this.dur ? (
        this.dur = dur;
        this._foa_grains_compute_phase_inc();
    );
);

function foa_grains_set_pitrnd(pitrnd)
(
    pitrnd < 0 ? pitrnd = 0 : pitrnd > 1 ? pitrnd = 1;
    this.pitrnd = pow(pitrnd, 3) * 0.5;
);

function foa_grains_set_posrnd(posrnd)
(
    posrnd < 0 ? posrnd = 0 : posrnd > 1 ? posrnd = 1;
    this.posrnd = pow(posrnd, 3) * 0.5;
);

function foa_grains_set(num pitch pos dur pitrnd posrnd)
(
    this.foa_grains_set_num(num);   
    this.foa_grains_set_pitch(pitch); 
    this.foa_grains_set_pos(pos);   
    this.foa_grains_set_dur(dur);   
    this.foa_grains_set_pitrnd(pitrnd);
    this.foa_grains_set_posrnd(posrnd);
);

// grains initializer
function foa_grains(num pitch pos dur pitrnd posrnd maxlen)
(
    this.maxlen = maxlen;
    bufloc_ = memalloc(4);
    bufloc_[0] = this.buf0.buffer(srate*maxlen);
    bufloc_[1] = this.buf1.buffer(srate*maxlen);
    bufloc_[2] = this.buf2.buffer(srate*maxlen);
    bufloc_[3] = this.buf3.buffer(srate*maxlen);
    this.sigout = memalloc(4);
    this.env.buffer(1024); this.env.buffer_window(6);
    this.foa_grains_set_pitch(pitch);
    this.foa_grains_set_pos(pos);
    this.foa_grains_set_dur(dur);
    this.foa_grains_set_pitrnd(pitrnd);
    this.foa_grains_set_posrnd(posrnd);
    this._foa_grains_init_memories();
    this.foa_grains_set_num(num);
    this.phase = this.recpos = this.reclen = this.sum = this.record = 0;
    bufloc_; // return buffer location into the global memory
);

// grains start/stop record function
function foa_grains_record(state)
(
    state == 1 && this.record == 0 ? (
        this.record = 1;
    ) : state == 0 && this.record == 1 ? (
        this.record = this.recpos = 0;
    );
);

function foa_grains_do(signal0, signal1, signal2, signal3)
(
    this.record == 1 ? ( // record input signal
        tmp0_ = signal0;
        tmp1_ = signal1;
        tmp2_ = signal2;
        tmp3_ = signal3;
        this.buf0.buffer_write(this.recpos, signal0);
        this.buf1.buffer_write(this.recpos, signal1);
        this.buf2.buffer_write(this.recpos, signal2);
        this.buf3.buffer_write(this.recpos, signal3);
        this.recpos += 1;
        this.reclen = this.recpos;
        this.recpos == (srate*this.maxlen) ? this.foa_grains_record(0);
    ) : ( // granulate recorded signal
        tmp0_ = 0;
        tmp1_ = 0;
        tmp2_ = 0;
        tmp3_ = 0;
        nc_ = 0;
        loop(this.num,
            ppos_ = this.phase + this.gphase[nc_];
            ppos_ >= 1 ? ppos_ -= 1;
            amp_ = this.env.buffer_fnread2(ppos_);
            ppos_ < this.lastpos[nc_] ? (
                len_ = this.reclen - this.gsize[nc_];
                this.gsize[nc_] = this.dur * srate;
                this.gsize[nc_] *= 1 + (rand(2)-1) * this.pitrnd;
                this.startpos[nc_] = this.pos * len_;
                this.startpos[nc_] += (rand(2)-1) * this.posrnd * this.reclen;
                this.startpos[nc_] < 0 ? (
                    this.startpos[nc_] += len_;
                ) : this.startpos[nc_] >=  len_ ? (
                    this.startpos[nc_] -=  len_;
                );
            );
            this.lastpos[nc_] = ppos_;
            index_ = ppos_ * this.gsize[nc_] + this.startpos[nc_];
            index_ >= 0 && index_ < this.reclen ? (
                tmp0_ += this.buf0.buffer_fread2(index_) * amp_;
                tmp1_ += this.buf1.buffer_fread2(index_) * amp_;
                tmp2_ += this.buf2.buffer_fread2(index_) * amp_;
                tmp3_ += this.buf3.buffer_fread2(index_) * amp_;
            );
            nc_ += 1;
        );
        tmp0_ *= this.gain;
        tmp1_ *= this.gain;
        tmp2_ *= this.gain;
        tmp3_ *= this.gain;
        this.phase += this.inc;
        this.phase < 0 ? this.phase += 1 : this.phase >= 1 ? this.phase -= 1;
    );
    // Returns a vector of four samples
    this.sigout[0] = tmp0_;
    this.sigout[1] = tmp1_;
    this.sigout[2] = tmp2_;
    this.sigout[3] = tmp3_;
    this.sigout;
);


/******************************************************* 
FOA_GRAINDELAY
==============

Simple first order ambisonics granular delay with feedback

Description
-----------

The `foa_graindelay` object is a granular delay with transposition
and feedback. It implements a 4 channel synchronous granular synthesis
on incoming audio buffered continuously onto a cycling buffer.
There will be `num` grains with their starting point equally spaced 
in time over the duration specified with the `dur` parameter. It uses
an internal tuckey window function as the grain envelope. Four channels
of audio are buffered, and the granulator produce four-channel grains.
This makes it well suited for granulation of first order ambisonic
A-format and B-format signals.

It must be used with a variable name as prefix (object oriented).

Initializer
-----------

#### foa_graindelay(num, dur, delay, delayrnd, pitch, pitrnd, feedback, buflen) ####

The `foa_graindelay` function initializes a synchronous granular delay.
It provides control over the number of overlapped grains
(`num`), the duration, in seconds, of the grains (`dur`), the delay time,
in seconds, (delay), the maximun additionl random delay time, the overall
transposition (`pitch`) and feedback in percents (feedback). The arguments
`delayrnd` and `pitrnd` control the amount of random applied to the delay
and pitch of each grain (regardless of the values of the other grains).

The `buf` argument is the length of the internal memory, in seconds, 
allocated at  initialization time. This space will be used as a cyclic buffer
for incoming samples to be granulated.

Methods
-------

#### foa_graindelay_set(num, dur, delay, delayrnd, pitch, pitrnd, feedback) ####

Sets all parameters at once. See other methods for more details.

#### foa_graindelay_set_num(num) ####

Sets a new number of overlapped grains `num`. The maximum number of
grains is 128.

#### foa_graindelay_set_dur(dur) ####

Sets a new grain duration `dur`, in seconds.

#### foa_graindelay_set_delay(delay) ####

Sets the delay time, in seconds.

#### foa_graindelay_set_delayrnd(posrnd) ####

Sets a new delay random factor, in secods.

#### foa_graindelay_set_pitch(pitch) ####

Sets a new transposition factor `pitch` (1 means no transposition).

#### foa_graindelay_set_pitrnd(pitrnd) ####

Sets a new pitch random factor, between 0 (no transposition) and 1
(full range random transposition).

#### foa_graindelay_set_feedback(feedback) ####

Sets a new feedback value, in percents. Depending on other settings
high feedback values might return signal to become unstable and blow up.

#### foa_graindelay_get_status() ####

Depending on grain duration, delay and pitch it might be that grains
start to close to current buffer recording buffer position, and progress
to fast, so that they overshoot the recording position before the
end of the grain. If so, additional delay is introduced to prevent this
from happening. Thus function returns 1 if corrections for overshoot
are being made, and 0 if no corrections are needed.

#### foa_graindelay_do(signal) ####

Processes one 4-channel samples of an input signal `signal` 
and outputs the processed sample.

Example
-------

    desc:4ch Grain Delay - Linked Chanels
    
    slider1:8<1,64,1>Number Of Grains
    slider2:100<1,500,1>Grain Duration (ms)
    slider3:125<0,1500,1>Delay (ms)
    slider4:0<0,500,1>Delay Randomisation (ms)
    slider5:0<-36.,12.,0.01>Transposition (MIDI)
    slider6:0.1<0,1>Random Transposition
    slider7:0<0,95>Feedback (%)
    slider8:0<0,1,1{Forward,reverse}>Grain Direction (not yet implemented)
    slider9:0<0,1,1{No correction needed,Correcting delay time to prevent overshooting}>Correction Status
    
    in_pin:1
    in_pin:2
    in_pin:3
    in_pin:4
    
    out_pin:1
    out_pin:2
    out_pin:3
    out_pin:4
    
    import cookdsp.jsfx-inc
    import 4ch-granulator.jsfx-inc
    
    @init
    
    // Initializes granulator with an internal memory of 4 seconds.
    // 4 seconds is more than enough with the parameter ranges set for this plugin
    // To calculate needed buffer size: Max delay + Max Delay Random + Max Grain Duration * Max Speed
    kBufLen = 4;
    buf = graindelay.foa_graindelay(num, dur, delay, delayrnd, pitch, pitrnd, feedback, kBufLen)
    
    
    @slider
    num = slider1;
    dur = slider2*0.001;
    delay = slider3 * 0.001;
    delayrnd = slider4 * 0.001;
    pitch = pow(2,(slider5/12.));
    pitrnd = slider6;
    feedback = slider7;
    
    // Sets all parameters at once.
    graindelay.foa_graindelay_set(num, dur, delay, delayrnd, pitch, pitrnd, feedback)
    
    
    @block
    slider9 = graindelay.foa_graindelay_get_status();
    sliderchange(slider9);
    
    @sample
    tmp_ = graindelay.foa_graindelay_do(spl0, spl1, spl2, spl3); 
    spl0 = tmp_[0];
    spl1 = tmp_[1];
    spl2 = tmp_[2];
    spl3 = tmp_[3];
    
********************************************************/

// Private functions
function _foa_graindelay_init_memories()
(
    this.startpos = memalloc(128);
    this.gsize = memalloc(128);
    this.gphase = memalloc(128);
    this.lastpos = memalloc(128);
);

function _foa_graindelay_reset_memories()
(
    memset(this.startpos, 0, 128);
    memset(this.gsize, 0, 128);
    memset(this.gphase, 0, 128);
    memset(this.lastpos, 0, 128);
);

function _foa_graindelay_compute_phase_inc()
(
    this.dur == 0 ? durtosamps_ = 0 : durtosamps_ = (1 / this.dur) / srate;
    this.inc = this.pitch * durtosamps_;
);


function _foa_graindelay_set_overshoot_status()
(
    debug_dur = this.dur;
    debug_pitch = this.pitch;
    debug_pitchrnd_max = (1 + this.pitrnd);
    debug_delay = this.delay;
    debug_status = ( this.dur * (1 + this.pitrnd) * this.pitch - this.dur - this.delay );
    
    this.overshoot_status = ( ( this.dur * (1 + this.pitrnd) * this.pitch - this.dur - this.delay ) > 0 );
);


function foa_graindelay_get_status()
(
    this.overshoot_status;
);


// grains setter functions
function foa_graindelay_set_num(num)
(
    num != this.num ? (
        num > 128 ? num = 128;
        this.num = num;
        num <= 24 ? (
            this.gain = pow(10, -num/2 * 0.05);
        ) : (
            this.gain = pow(10, -12 * 0.05);
        );
        this._foa_graindelay_reset_memories();
        nc_ = 0;
        loop(num,
            //ph_ = (nc_/num) * (1.0 + (rand(2)-1) * 0.01); // TODO: Why the last part of this? It just seems to offset the phase of some of the grains by 1%.
            ph_ = nc_/num; // TODO: Testing
            ph_ < 0 ? ph_ = 0 : ph_ >= 1 ? ph_ -= 1;
            this.gphase[nc_] = ph_;
            this.lastpos[nc_] = 1;
            nc_ += 1;
        );
    );
);

function foa_graindelay_set_dur(dur)
(
    dur != this.dur ? (
        this.dur = dur;
        this._foa_graindelay_compute_phase_inc();
        this._foa_graindelay_set_overshoot_status();
    );
);

function foa_graindelay_set_delay(delay)
(
    delay < 0 ? delay = 0 : delay > this.buflen ? delay = this.buflen;
    this.delay = delay;
    this._foa_graindelay_set_overshoot_status();
);

function foa_graindelay_set_delayrnd(delayrnd)
(
    delayrnd < 0 ? delayrnd = 0;
    // NB - Max delayrnd need to be sanitized by the plugibn that instantiates this class
    this.delayrnd = delayrnd;
    this._foa_graindelay_set_overshoot_status();
);

function foa_graindelay_set_pitch(pitch)
(
    pitch != this.pitch ? (
        this.pitch = pitch;
        this._foa_graindelay_compute_phase_inc();
        
        lpfreq_ = ( srate * 0.95 * 0.5 );
        this.pitch > 1 ? ( lpfreq_ = lpfreq_ / this.pitch );
        
        filt_lp0.butlp_set_freq( lpfreq_ );
        filt_lp1.butlp_set_freq( lpfreq_ );
        filt_lp2.butlp_set_freq( lpfreq_ );
        filt_lp3.butlp_set_freq( lpfreq_ );
        
        this._foa_graindelay_set_overshoot_status();
    );
);

function foa_graindelay_set_pitrnd(pitrnd)
(
    pitrnd < 0 ? pitrnd = 0 : pitrnd > 1 ? pitrnd = 1;
    this.pitrnd = pow(pitrnd, 3) * 0.5;
    this._foa_graindelay_set_overshoot_status();
);

function foa_graindelay_set_feedback(feedback)
(
    feedback = feedback * 0.01;
    feedback < 0 ? feedback = 0 : feedback > 0.95 ? feedback = 0.95;
    this.feedback = feedback;
);

function foa_graindelay_set(num dur delay delayrnd pitch pitrnd feedback)
(
    this.foa_graindelay_set_num(num);
    this.foa_graindelay_set_dur(dur);
    this.foa_graindelay_set_delay(delay);
    this.foa_graindelay_set_delayrnd(delayrnd);
    this.foa_graindelay_set_pitch(pitch); 
    this.foa_graindelay_set_pitrnd(pitrnd);
    this.foa_graindelay_set_feedback(feedback);
);

// Initializer
function foa_graindelay(num dur delay delayrnd pitch pitrnd feedback buflen)
(
    // Set up buffers - buflen is seconds
    this.buflen = srate*buflen;
    bufloc_ = memalloc(4);
    bufloc_[0] = this.buf0.buffer(this.buflen);
    bufloc_[1] = this.buf1.buffer(this.buflen);
    bufloc_[2] = this.buf2.buffer(this.buflen);
    bufloc_[3] = this.buf3.buffer(this.buflen);
    
    // Set up output signals
    this.sigout = memalloc(4);
    
    // Set up window function
    this.env.buffer(1024); this.env.buffer_window(6);
    
    // Set delay parameters
    this.foa_graindelay_set_dur(dur);           // Grain duration
    this.foa_graindelay_set_delay(delay);       // Delay in seconds
    this.foa_graindelay_set_delayrnd(delayrnd); // Delay randomisation (spray) in seconds
    this.foa_graindelay_set_pitch(pitch);       // Transposition (as MIDI interval)
    this.foa_graindelay_set_pitrnd(pitrnd);     // Transposition randomisation (as MIDI interval)
    this.foa_graindelay_set_feedback(feedback); // Feedback in percents (%)

    // Set memory for individual grain parameters and set number of grains
    this._foa_graindelay_init_memories();
    this.foa_graindelay_set_num(num);
    
    // Set initial recording and playback positions
    this.phase = this.reclen = this.sum = this.recpos = 0;
    
    // DC filters
    filt_dc0.buthp(20);
    filt_dc1.buthp(20);
    filt_dc2.buthp(20);
    filt_dc3.buthp(20);
    
    // Low Pass filters near Nyquist
    filt_lp0.butlp(srate * 0.45);
    filt_lp1.butlp(srate * 0.45);
    filt_lp2.butlp(srate * 0.45);
    filt_lp3.butlp(srate * 0.45);
    
    bufloc_; // return buffer location into the global memory
);

// DSP processing
function foa_graindelay_do(signal0, signal1, signal2, signal3)
(
    // Granulate recorded signal
    tmp0_ = 0;
    tmp1_ = 0;
    tmp2_ = 0;
    tmp3_ = 0;
    
    // Iterate over grains
    nc_ = 0;
    loop(this.num,
        ppos_ = this.phase + this.gphase[nc_];
        ppos_ >= 1 ? ppos_ -= 1;
        amp_ = this.env.buffer_fnread2(ppos_);
        ppos_ < this.lastpos[nc_] ? (
            
            // Trigger new grain
            len_ = this.buflen;
            this.gsize[nc_] = this.dur * srate;
            
            // Introduce pitch variation between grains by making singular grains cover more or less samples
            this.gsize[nc_] *= 1 + (rand(2)-1) * this.pitrnd;
            graindelay_ = ( this.delay + rand(1) * this.delayrnd ) * srate;
            this.startpos[nc_] = this.recpos - graindelay_;
            
            // Prevent grain from running ahead of the buffering (overshooting)
            overshoot_ = this.gsize[nc_] * this.pitch - this.dur * srate - graindelay_;
            overshoot_ > 0 ? this.startpos[nc_] -= overshoot_ - 1;            
            this.startpos[nc_] < 0 ? (
                this.startpos[nc_] += len_;
            ) : this.startpos[nc_] >=  len_ ? (
                this.startpos[nc_] -=  len_;
            );
            
        );
        this.lastpos[nc_] = ppos_;
        index_ = ppos_ * this.gsize[nc_] + this.startpos[nc_];
        index_ >= len_ ? index_ -= len_;
        tmp0_ += this.buf0.buffer_fread2(index_) * amp_;
        tmp1_ += this.buf1.buffer_fread2(index_) * amp_;
        tmp2_ += this.buf2.buffer_fread2(index_) * amp_;
        tmp3_ += this.buf3.buffer_fread2(index_) * amp_;
        nc_ += 1;
    );
    
    tmp0_ *= this.gain;
    tmp1_ *= this.gain;
    tmp2_ *= this.gain;
    tmp3_ *= this.gain;
    
    // DC filtering
    tmp0_ = filt_dc0.buthp_do(tmp0_);
    tmp1_ = filt_dc1.buthp_do(tmp1_);
    tmp2_ = filt_dc2.buthp_do(tmp2_);
    tmp3_ = filt_dc3.buthp_do(tmp3_);
    
    // Filt4ering near Nyquist
    tmp0_ = filt_lp0.butlp_do(tmp0_);
    tmp1_ = filt_lp1.butlp_do(tmp1_);
    tmp2_ = filt_lp2.butlp_do(tmp2_);
    tmp3_ = filt_lp3.butlp_do(tmp3_);
    
    this.phase += this.inc;
    this.phase < 0 ? this.phase += 1 : this.phase >= 1 ? this.phase -= 1;
        
    // Record input signal and feedback onto cyclic buffer
    // End point interpolation is handled by buffer_write()
    // Feedback has phase reversed for additional richness(?)
    this.buf0.buffer_write(this.recpos, signal0 - this.feedback * tmp0_);
    this.buf1.buffer_write(this.recpos, signal1 - this.feedback * tmp1_);
    this.buf2.buffer_write(this.recpos, signal2 - this.feedback * tmp2_);
    this.buf3.buffer_write(this.recpos, signal3 - this.feedback * tmp3_);
    
    this.recpos += 1;
    this.recpos >= this.buflen ? this.recpos = 0;

    // Returns a vector of four samples
    this.sigout[0] = tmp0_;
    this.sigout[1] = tmp1_;
    this.sigout[2] = tmp2_;
    this.sigout[3] = tmp3_;
    this.sigout;
);
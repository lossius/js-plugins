/*
This file is a modification by Trond Lossius of code from cookdsp.
*/

/////////////////////////////////////////////////////////////////
// cookdsp is copyright (c) - 2015 - Olivier Belanger          //
// Permission to use, copy, modify, and/or distribute this     //
// software for any purpose with or without fee is hereby      //
// granted, provided that the above copyright notice and this  //
// permission notice appear in all copies. CookDSP IS PROVIDED //
// "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.      //
/////////////////////////////////////////////////////////////////

@init

/*
EQ
===

Equalizer filter extensions

#### eq_set_freq(freq) ####

Query magnitude of filter response at `freq`, returns filter desponse as dB

Source: http://musicdsp.org/showArchiveComment.php?ArchiveID=108

*/
function eq_query_magnitude(freq) local(w)
(  
  w = (2*freq*$pi)/srate;
  
  // Calculate and return gain in dB
  10*log10(
    (
      this.a0*this.a0 + this.a1*this.a1 + this.a2*this.a2 +
      2*(this.a0*this.a1 + this.a1*this.a2)*cos(w) + 
      2*(this.a0*this.a2)*cos(2*w)
    ) / (
      this.b0*this.b0 + this.b1*this.b1 + this.b2*this.b2 +
      2*(this.b0*this.b1 + this.b1*this.b2)*cos(w) + 
      2*(this.b0*this.b2)*cos(2*w)
    )
  );
);




/******************************************************* 
BUTHP1
======

First-order Butterworth highpass filter.

Description
-----------

The buthp1 object initializes a first-order IIR Butterworth 
highpass filter. It takes the cutoff frequency, in Hz, as argument.

The Butterworth filter is a type of signal processing filter designed 
to have as flat a frequency response as possible in the passband.

It must be used with a variable name as prefix (object oriented).

Initializer
-----------

#### buthp1(freq) ####

Initializes a highpass filter with `freq` as the cutoff frequency.

Methods
-------

#### buthp1_set_freq(freq) ####

Sets a new cutoff frequency `freq`, in Hz.

#### buthp1_do(signal) ####

Processes one samples of an input signal `signal` and outputs
the filtered sample.

Example
-------

    desc:Butterworth 1st Order Highpass Filter

    import cookdsp.jsfx-inc

    slider1:3500<100,10000>Cutoff Frequency In Hz

    @init
    // Initializes the filter
    filt1.buthp1(slider1);
    filt2.buthp1(slider1);

    @slider
    filt1.buthp1_set_freq(slider1);
    filt2.buthp1_set_freq(slider1);

    @sample
    // Filters the input signal
    spl0 = filt1.buthp1_do(spl0);
    spl1 = filt2.buthp1_do(spl1);

********************************************************/
function _buthp1_compute_coeffs(freq)
(
    this.freq = clip(freq, 1.0, this.ny);
	c_ = 2*$pi*this.freq;
	c2_ = c_/tan($pi*this.freq/srate);
  	this.a0 = c2_/(c2_+c_); 
  	this.a1 = -this.a0;
  	this.b1 = (c_-c2_)/(c2_+c_);
);

function buthp1(freq)
(
    this.x1 = this.y1 = 0.0;
    this.ny = srate * 0.49;
    this._buthp1_compute_coeffs(freq);
);

function buthp1_set_freq(freq)
(
    this._buthp1_compute_coeffs(freq);
);

function buthp1_do(signal)
(
    // This is a more efficient version...
    tmp_ = this.a0*(signal - this.x1) - this.b1*this.y1;
    // ...of this:
    // tmp_ = this.a0 * signal + this.a1 * this.x1 - this.b1 * this.y1;
    this.x1 = signal; this.y1 = tmp_;
    tmp_;
);